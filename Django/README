启动项目:
django-admin.py startproject xxxx
上面这个命令会创建一个 djproject 目录，其中包含了运行 Django 项目所需要的基
本配置文件

要创建应用程序，可以使用 manage.py 脚本，这是一个特定于项目的 django-admin.py 脚本，其中 settings.py 文件可以自动提供

python2 manage.py startapp jobs
这样将要创建一个应用程序骨架，其中模型有一个Python模块，视图有另外一个Python模块
会在job目录下生成__init__.py modules.py views.py

为了使 Django 认识到新应用程序的存在，还需要向 settings.py 文件中的 INSTALLED_APPS 添加一个条目。对于这个职位公告板应用程序来说，我们必须添加字符串 djproject.jobs

Django的404 Error页
这个错误


当我们输入网址的时候，所有均开始与setting文件。当我们运行python manger.py 
runserver,脚本将在于manger.py同一个目录下查找名为setting.py的文件。这个文件
包含了所有有关这个Django项目的配置信息，均大写:TEMPLATE_DIRS, DATABASE_NAME
等。最重要的设置是ROOT_URLCONF，它将作为URLconf告诉Django在这个站点中哪些
python的模块将被用到。
如:mysite.urls ========= mysite/urls.py

当访问我们的urls.py的文件的是哈，Django根据ROOT_URLCONF的设置装载URLconf。然
后按顺序逐个匹配URLconf里面的URLpatterns，直到找到一个匹配的。当找到这个匹配
的URLpatterns就调用相关联的view函数，并把HttpResponse对象作为第一个参数，返
回。


----------------------------------------------------------------------------
	

				动态内容

我们可以在我们views.py文件中加入我们的一些视图函数：
(注意，返回HttpResponse对象)。还不要忘了导入相应的模块。
添加完之后，不要忘了在我们的urls.py文件中，匹配我们的新添加的视图函数

注意：Django是有时区区分的，并且默认时区是America/Chicago。(它必须有个值，
它的默认值是Django的诞生地:美国/芝加哥)如果我们处于其他的时区，需要进行修改
我们在进行创建的时候，要灵活的使用正则表达式


----------------------------------------------------------------------------
			    URL配置和松耦合
松耦合是一个重要的保证互换性的软件开发方法。


出错的调试：
我们可以用过使用assert False来触发出错页面。
Django在我们开启运行服务器的时候，它默认的运行了debug模式.


			      Django模板
将我们的HTML编写到我们的views文件不是一个好的主意。原因如下：
1.对页面设计进行的任何改变都必须对Python代码进行相应的改变。站点设计的修改往
往比底层Python代码的修改要繁琐的多，由此如果可以不再进行Python代码修改的现况
下变更设计，那将会方便得多。

2.Python代码编写和HTML设计是两个不同的工作，大多数专业的网站开发环境都将他们
分配给不同的人员(部门)来完成。设计者和HTML/CSS的编码人员不应该被要求去编辑
Python的代码来完成他们的工作

3.程序员编写Python代码和设计人员制作模板两项工作同时进行的效率是最高。

使用模板：
需要导入模块:from django.template import Template,Contex
这里的Template模块是我们定义模板的模块
Contex模块是我们对模板进行实例化使用的模块
如:
from django.template import Template, Contex

t = Template('Hello , {{ name }}')
t.render(Contex({'name':'songshuang'}))
这样t就是Hello，songshuang了
还可以这样的使用:
c = Context({'name':'songshuang'})
t.render(c)
结果和上面的一样

我们可以用过context不仅可以传递简单的字符串，还可以处理更加复杂的数据结构，
如list,dictionary,和自定义的对象。

在Django模块中遍历复杂数据结构的关键是句点字符(.)
如:
from django.template import Template,Context
person = {'name':'songshuang', 'age':'23'}
t = Template('{{ person.name }} is {{ person.age }} yeras old')
c = Context({'person':person})
t.render(c)



from django.template import Template,Context
import datetime
d = datetime.date(1991,10,15)
d.year ----> 1991
d.month----> 10
d.day  ----> 15

t = Template('The month is {{ date.month }} and the year is {{ date.year}}')
c = Context({'date':d})
t.render(c)


对类进行的模板操作:
from django.tempalte import Template,Context

class Person(object):
	def __init__(self, first_name, last_name):
		self.first_name, self.last_name = first_name, last_name

t = Template('Hell, {{ Person.first_name }}{{ Person.last_name }}')
C = Context({'person':Person('song',shuang)})//进行调用构造函数，进行创建对
象
t.render(C)

点语法也可以用来引用对象的‘方法’。
如:
from django.template import Template,Context
t = Template('{{ var }} -- {{ var.upper }} -- {{ var.idigit }}')
c = Context({'var':'123'})
t.render(c)
注意:这里调用的方法只能是调用没有参数的方法.

句点也可以用与访问列表的索引:
如:
from django.tempalte import Template,Context
t = Template('item 2 is {{ items.2 }}')
c = Context({'items':['apple','bananas','carrots']})
t.render(c)
注意：不允许使用负数表示索引。

方法调用的行为:
在方法查找的过程中，如果某个方法抛出一个异常，除非该异常有一个
silent_variable_failure属性并且值为True,否则的话，它将被传播。如果异常被传播
模板里的变量将变成空白的字符串。

处理无效的变量:
在默认的情况下，如果一个变量不存在，模块系统会把它展示为空字符串，不做任何
事情来表示失败。
如:
from djanfo.tempalte import Template,Context
t = Template('Your name is {{ name }}')
t.render(Context())
这样的话，只会输出Your name is.
系统只是静悄悄的表示失败，而不是抛出一个异常。

标签:
{% if %}标签检查一个变量，如果这个变量为真(几存在)
如:
{% if %}
	...
{% else %}
	...
{% endif%}

在Python和Django的模板系统中，为False的情况:
1.空列表
2.空元组
3.空字典
4.空字符串
5.零值(0)
6.特殊对象None
7.对象False

注意：我们使用if的时候，一定要加上一个endif

{% for... %}
	...
{% endfor %}
用法和if...else...endif一样
注意：Django不支持退出循环操作，也不支持continue。
在我们的for循环中，有个forloop.counter总是一个表示当前循环执行次数的整数计数
器。这个计数器是从1开始计数。
forloop.counter0:从0开始计数
forloop.revcounter:表示循环中剩余的整型变量
forloop.revcounter0:从0开始计数的表示剩余的整型变量
forloop.first:判断是否是第一次执行
如:
{% for object in objects%}
	{% if forloop.first %}
		<li class="first">
	{% else %}
		<li>
	<% endif %>
	{{ object }}
	</li>
{% endfor %}

forloop.last:在最后一次被执行的时候被置为True
如:
{% for link in links%}
	{{ link }}
	{% if not forloop.last %}| {% endif %}
{% endfor %}
上面的结果会产生如下的结果:
link1 | link2 | link3 | link4

注意:在一个{% for %}块中，已经存在的变量会被移除，以避免forloop变量会被覆盖
Django会把这个变量移动到forloop.parentloop中通常我们不用担心这个问题，但是一
旦我们在模块中定义了forloop这个变量，在{%for%}块中它会在forloop.parentloop被
重新命名.

注释:{# ....... #}这种注释的方法不能跨越多行进注释
需要实现多行的注释，我们需要这样的使用:
"{.....}"


过滤器:
过滤器就是我们的管道的使用.
如:
{{ name|upper }}---->显示的变量name是我们大写转换之后的结果
{{ my_list|first|upper }}-->显示的是我们第一个转换成大写之后的结果
有些过滤器有参数的:如:
{{ bio|truncatwords:"30" }}-->这个将显示变量bio的前30个词

比较重要的过滤器:
addslashes:添加反斜刚到任何反斜杠，单引号或者双引号前面。这些处理在JavaScrip
t的文本是非常有用的。
date：按指定的格式字符串参数格式化date或datetime对象。
如:{{ pub_date|date:"F j, Y" }}
length:返回变量的长度。


				模块的自动加载和模块目录技巧
模块加载：
模块的自动加载我们使用的是模块加载API，首先我们必须将这个模板的保存位置告诉
框架。(ROOT_URLCONF的配置settints.py)
TEMPLATE_DIRS=(
	"/home/diango/html/templates",
)

设置完了TEMOLATE_DIRS之后，下一步就是修改试图的代码了
如:
from django.tempalte.loader import get_template

def current_datetime(request):
	now = datetime.datetime.now()
	t = get_template('current_datetime.html')
	html = t.render(Context({'current_date':now}))
	return HttpResponse(html)

我们使用get_template（）加载我们的函数模块。


render_to_response()
需要导入模块:
from django.shortcuts import render_to_response
使用这个方法的话，会省略了我们get_template(),render()
如:
from django.shortcuts import render_to_response
import datetime

def current_datetime(request):
	now = datetime.datetime.now()
	retuen render_to_response('current_datetime.html',{'currrnt_date':now})
render_to_response()的第一个参数必须是要使用的模块名称。如果要给定第二个参数
，那么该参数必须是为该模板创建Context时所需要的字典。如果不传，使用空字典。


				include模板标签

使用include是将我们其他的html模板加载到我们的html程序中
如:
	#mypage.html
<html>
<body>
	{% include "../songshuang.html"%}
<h1>{{ tittle }}</h1>
</body>
</html>

	#songshuang.html
<div id = "nav">
	You are in:{{ current_section }}
</div>



				模板继承

模板继承就是先构造一个基础框架模板，而后在其子模板中对它所包含站点公用部分和
定义块进行重载。
使用过程:
1.定义基础模板，该框架之后由子模板所继承.
<!DOCTYOPE HTML PUBLIC "//w3c//dtd html 4.01//en">
<html lang="en">
<head>
	<title>{% block title%}{% endblock %}</title>
</head>
<body>
	<h1>My helpful timestamp site</h1>
	{% block content%}{% endblock %}
	{% block footber%}
	<hr>
	<p>Thanks for visiting my site</p>
	{% endblock %}
</body>
</html>
所有的{% block %}标签告诉模板引擎，子模板可以重载这些部分。每个{% block %}
标签所要做的是告诉模板引擎，该模板下的这一块内容将有可能被覆盖
下面就是对上面的基本模板进行重载：
#current_datetime.html
....
{% extend "base.html" %}
{% block title %}The Current time{% endblock %}
{% block content%}
<p>it is now {{ current_date }}.</p>
{% endblock %}
....


============================================================================
					模型	

在视图中进行数据库查询的方法：
from django.shortcuts import render_to_response
import MySQLdb

def book_list(request):
	db = MySQLdb.connect(user='me', db='mydb',passwd='secrect',host='localhost')
	cursor = db.cursor()
	cursor.execute('SELECT name FROM books ORDER BY name')
	names = [row[0] for row in cursor.fetchall()]
	db.close()
	return render_to_response('book_list.html',{'name':names})

MTV开发模式:
MVC(Model-View-Controller):把数据存取逻辑，业务逻辑和表现逻辑组合在一起的概
念有时被称为软件架构的MVC模式。
Model：代表数据存取层
View：代表的是系统中选择显示什么和怎么显示的部分
Controller：代表的是系统中根据用输入并视需要访问模型，以决定使用哪个试图的那
部分
Django遵循这样的设计模式
M:数据存取部分，由Django数据库层处理
V:选择显示哪些数据要显示以及怎样显示的部分。由视图和模板处理
C:根据用户输入委派视图的部分，由Django框架根据URLconf设置，对给定URL调用适当
的Python函数
由于C由框架自行处理，而Django里更关注的是模型(Module),模板(Template)和视图(V
iews)------->MTV

在Django对MVC的诠释中，视图用来描述要展现给用户的数据;不是数据如何展现，而且
展现哪些数据。


数据库的配置:
在我们的settings.py中要进行如下的配置
DATABASE_ENGINE=''
DATABASE_NAME=''
DATABASE_USER=''
DATABASE_PASSWORD=''
DATABASE_HOST=''
DATABASE_PORT=''

DATABASE_ENGINE:告诉Django使用哪个数据库引擎。
配置范例：
DATABASE_ENGINE='postgresql_psyconpg2'

DATABASE_NAME='mydb'如果使用SQLite：需要指定完整的文件系统路径:
DATABASE_NAME='/home/django/mysql.db'

DATABASE_USER='songshuang'

DATABASE_PASSWORD='123456'

DATABASE_HOST='192.168.131.12'

DATABASE_PORT=''

from django.db import connection
cursor = connection.cursor()

Django用模型在后台执行SQL代码并把结果用Python的数据结构来描述。Django也使用
模型来呈现SQL无法处理的高级概念。

使用模型的一般过程:
1.使用Python来描述我们的对象。在我们的module.py中
from django.db import models

class Publisher(models.Model):
    name = models.CharField(max_length=30)
    address = models.CharField(max_length=50)
    city = models.CharField(max_length=60)
    state_province = models.CharField(max_length=30)
    country = models.CharField(max_length=50)
    website = models.URLField()

class Author(models.Model):
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=40)
    email = models.EmailField()

class Book(models.Model):
    title = models.CharField(max_length=100)
    authors = models.ManyToManyField(Author)
    publisher = models.ForeignKey(Publisher)
    publication_date = models.DateField()

每个数据模型都是django.db.models.Model的子类。
它的父类Model包含了所有必要的和数据库交互的方法，并提供了一个简洁漂亮的定义
数据库字段的语法。
每个模型相当于单个数据库表，每个属性也是这个表中的一个字段。属性名就是字段名
，它的类型(CharField)相当于数据库中的字段类型(varchar)。

每个数据库表对应一个类，这条规则的列外情况是多对多关系。
在我们的范例中，Book有一个多对多字段叫做author。想法，Django创建了一个额外的
表（多对多连接表）来处理书籍和作者之间的映射关系。

最后需要注意的是，我们并没有显示地为这些模型定义任何主键。除非你单独指明，否
则Django会自动为每个模型生成一个自增长的整数主键字段每个D激昂哦模型都要求有
单独的主键。id

2.模型安装
在我们的settings.py中的INSTALL_APP中添加我们刚刚创建的模块。
然后使用python manage.py vaildate进行验证模型的有效性
当我们模型没有问题的是哈，我们可以使用SQL语句了。
python manage.py sqlall books

BEGIN;
CREATE TABLE "books_publisher" (
    "id" integer NOT NULL PRIMARY KEY,
    "name" varchar(30) NOT NULL,
    "address" varchar(50) NOT NULL,
    "city" varchar(60) NOT NULL,
    "state_province" varchar(30) NOT NULL,
    "country" varchar(50) NOT NULL,
    "website" varchar(200) NOT NULL
)
;
CREATE TABLE "books_author" (
    "id" integer NOT NULL PRIMARY KEY,
    "first_name" varchar(30) NOT NULL,
    "last_name" varchar(40) NOT NULL,
    "email" varchar(75) NOT NULL
)
;
CREATE TABLE "books_book_authors" (
    "id" integer NOT NULL PRIMARY KEY,
    "book_id" integer NOT NULL,
    "author_id" integer NOT NULL REFERENCES "books_author" ("id"),
    UNIQUE ("book_id", "author_id")
)
;
CREATE TABLE "books_book" (
    "id" integer NOT NULL PRIMARY KEY,
    "title" varchar(100) NOT NULL,
    "publisher_id" integer NOT NULL REFERENCES "books_publisher" ("id"),
    "publication_date" date NOT NULL
)
;
CREATE INDEX "books_book_authors_36c249d7" ON "books_book_authors" ("book_id");
CREATE INDEX "books_book_authors_e969df21" ON "books_book_authors" ("author_id");
CREATE INDEX "books_book_81b79144" ON "books_book" ("publisher_id");

COMMIT;
自动生成的表名是app名称(books)和模型的小写名称(publisher,book,author)的组合
Django为每个表格自动添加一个id主键。
按约定，Django添加"_id"后缀到外键字段名。
外键使用REFERENCES语句明确定义的。

sqlall命令并没有在数据库中真正的创建数据表，只是把SQL语句段打印出来。

更简单的一种提交SQL语句至数据库的方法：syncdb命令
python manage.py syncdb
执行完这条语句后，会显示如下的内容：
Creating table books_publisher
Creating table books_author
Creating table books_book
Installing index for books.Book model

syncdb命令是同步你的模型到数据库的一个简单的方法。
syncdb命令它会根据INSTALLED_APPS里面设置的app来检查数据库，如果表不存在，它
就会创建它。但是需要的是，syncdb并不能将模型的修改或删除同步到数据库;如果你
修改或删除了一个模型，并想把它提交到数据库，syncdb并不会做出任何处理。

python manage.py syncdb总是安全的，它不会重复执行SQL语句。

我们可以执行python manage.py dbshell进行使用客户端登入操作。
这条语句依据DATABASE_SERVER里面的设置来自动检测使用哪种命令行客户端的。
我们创建一个数据：
p1 = Publisher(name='', city='',....)
或者
p1 = Publisher.object.create(name='',city='',...)
提交我们的p1
p1.save()
我们创建一个对象p1相当于我们对数据库进行INSTA INTO book VALUES (....);
我们是使用save相当于使用SQL：
UPDATE book SET （name='',city='',....） WHERE id = 2;

选择对象：
Publisher.object.all() ===== SELECT * FROM books;
Django在选择所有数据的时候，并没有使用SELECT * ，而是显示的列出所有的字段。



数据的过滤：
使用filter()方法：
如：
Publlisher.object.filter(name='songshuang')
这个用法相当于我们的SQL中的WHERE条件限制。
我们也可以传递多个条件
Publlisher.object.filter(name='songshuang', city='ZH')
多个条件会被转换成我们SQL中的AND

在我们的python中也可以使用正则进行表示

异常的处理：
当我们的对象不存在，或者返回多个对象的时候，会抛出一个异常:DoesNotExist异常
我们捕获这个异常:
try:
	p = Publisher.object.get(name='songshuang')
except Publisher.DoesNOtExitst:
	print "songshuang is not in databases"
else:
	print "songshuang is in databases"

数据排序：
使用order_by()方法：
Publisher.object.order_by("name")按name进行排序。

连锁查询：
Publisher.objuect.filter(country='China').order_by("name")
相当于我们的SQL：
SELSECT id,name,address,city,state_province,country,website 
FROM books_publisher
WHERE country = 'China'
ORDER BY name DESC;

限制返回数据:
Publisher.object.order_by("name")[0]
返回数据中的第一个。
相当于:
SELSECT id,name,address,city,state_province,country,website
FROM books_publisher
ORDER BY name
LIMIT 1;

Publisher.object.order_by("name")[0:2]
相当于：
SELECT id,name,address,city,state_province,country,website
FROM books_publisher
ORDER BY name
OFFSET 0 LIMIT 2;
注意：不支持python中的负数索引

更多的对象：
我们使用save()方法的时候，它会更新我们一行数据中的所有列，有时候，我们不希
更新所有列，我们可以使用update()方法:
Publisher.objec.filter(id=52).update(name='songshuang');
将我们的id为52的行中的name改为songshuang
这样的用法会使语句变得更高效，并且不会引起竞态条件。
update（）可以同时更新多条记录。

删除对象:使用delete()方法
p = Publisher.object.get(name='songshuang')
p.delete()
Publisher.object.all()
我们也可以删除多条数据:
Publisher.object.all().delete()
Publisher.object.all()

Djanto要求在删除表内的多有的数据的时候要显示的使用all()

删除部分的数据:
Publisher.object.filter(name='songshuang').delete()




===========================================================================
					
							Django站点管理

django.contrib包：
Djanto自动管理工具是django.contrib的一部分。
django.contrib.admin。
用户鉴别系统：django.contrib.auth
支持会话：django.contrib.sessioins
用户评注系统:django.contrib.comments


激活管理界面：

管理的步骤:
一.对settings文件做如下的改变：
	1.将'django.contrib.admin'加入settings中的INSTALL_APPS配置中。
	2.保证INSTALL_APPS中包含'django.contrib.auth','django.contrib.contenttyp
es' 和 'django.contrib.sessions'。Django的管理工具需要这三包
	3.确保MIDDLEWARE_CLASSES包含'django.middleware.common.CommonMiddleware',
'django.contrib.sessions.middleware.SessionMiddleware'和'django.contrib.auth
.middleware.AuthenticationMiddleware'

第二步：
运行python manage.py syncdb。这一部将生成管理界面使用的额外数据库表。当你把
'django.contrib.auth'加入INSTALL_APPS后，第一次运行syncdb命令的时候，系统就
会为你创建一个超级用户。

第三步：
将admin访问配置在URLconf(在urls.py中)
注意：以下的内容是必须确保存在的:

from django.contrib import admin
admin.autodiscover()

urlpatterns = patterns('',
	#....
	(r'^admin/$',include(admin.site.urls)),
	#....
)

配置好之后，我们在我们的127.0.0.1:8000/admin/中就可以访问了。

在Django管理页面中，每一个数据类型都有一个 *change list* 和*edit form*。前者
显示数据库中所有的可用对象，后者可以让你添加，更改和删除数据库中的某条记录


将Models加入到Adimin管理中

Admin的工作：
当服务启动的时候，Django从'url.py'引导URLconf，然后执行'admin.autodiscover()
'语句。这个函数遍历INSTALL_APPS配置，并且寻找相关的admin.py文件。如果在指定
的app目录下找到admin.py，它就执行其中的代码。

在我们的app模块中，每次调用admin.site.resigter()都将那个模块注册到管理工具中
。管理工具只是为那些明确注册的模块显示一个编辑/修改的界面。

应用程序django.contrib.auth包含自身的admin.py,所以User和Groups能在管理工具中
自动显示。其它的django.contrib应用程序，如django.contrib.redirects，其他从网
上下载的第三方Django应用程序一样，都会自动添加到管理工具。

管理工具其实就是一个Django应用程序，包含自己的模块，模板，视图和URLpatterns
你要像添加自己的视图一样，把它添加到URLconf里面。你可以在Django基本代码中的
django/conrib/admin目录下，检查它的模板，视图和URLpatterns，但你不要尝试直接
修改其中的任何代码，因为里面有很多地方可以让你自定义管理工具的工作方式。

我们的SQL中有NULL这样的值，它不同于空字符串，就像python中的None不同于""一样
这意味着某个字符字段(如VARCHAR)的值不可能同时包含NULL和空字符串。

为了消除歧义，Django生成CREATE_TABLE语句自动为每个字段显示的加上NOT NULL。
如:
CREATE TABLE "books" (
	"name" varchar(50) NOT NULL
)

但是在时期型，时间型和数字型字段不能接收空字符。我们在Django中的设置如下:
class Book(models.Model):
	title = models.CharField(max_lengt=100)
	authors = models.ManyToManyField(Author)
	publisher = models.ForeginKey(Publisher)
	publisher_date = models.DateField(**bland=True, null=True**)

blank=True和null=True表示可以是空字符串


自定义列表：
列表默认显示查询结果中对象的__unicode_():
class Author(models.Model):
	first_name = models.CharField(max_length=30)
	last_name = models.CharField(max_length=40)
	email = models.EmailField(blank=True,verbose_name='e-mail')

	def __unicode__(self):
		return u'%s %s' % (self.first_name, self.last_name)

	
使用ModelAdmin类。这个类是自定义管理工具的关键，其中最基本的一件事情是允许你
指定列表中的字段。
如:
from django.contrib import admin
from mysite.books.models import Publisher, Author, Book

class AuthorAdmin(admin.ModelAdmin):
	list_display = ('first_name', 'last_name', 'email')

admin.site.register(Publisher)
admin.site.register(Author, AuthorAdmin)
admin.site.register(Book)

我们修改了admin.site.register()调用，在Author后面添加了AuthorAdmin。用Author
Admin选项注册Author模块。

增加一个快速查询栏。向AuthorAdimn追加serach_fields如：
class AuthorAdmin(admin.ModelAdmin):
	list_display = ('first_name', 'last_name', 'email')
	search_fields = ('first_name','last_name')



================================================================================

				表	单

================================================================================

从Request对象获取数据
每个view函数的一个参数是一个HttpRequest对象

URL相关信息：
HttpRequest对象包含当前请求URL的一些信息

request.path	 除域名以外的请求路径，以正斜杠开头
request.get_host()	主机名(比如,通常所说的域名)
request.get_full_path()		请求路径，可能包含查询字符串
request.is_secure()	如果通过HTTPS访问，则此方法为True，否则返回Flase
在views函数里，要始终用这个属性或方法来得到URL，而不要手动输入。
如:
def current_url_view_good(request):
    return HttpRequest("Welcome to the page at %s"% request.path)

有关request的其他信息：
request.META是一个python字典，包含了所有本次HTTP请求的Header信息。
字典当中常见的几个键有:
	HTTP_REFERER:进站前链接网页，如果有的话
	HTTP_USER_AGENT:用户浏览器的user-agent字符串
	REMOTE_ADDR:客户端IP
注意：因为request.META是一个普通的python字典，因此当你视图访问一个不存在的键是，会触发一个ke
yError异常，我们应该使用tey/except语句。
如:
def ua_display_good(request):
    try:
	ua = request.META['HTTP_USER_AGENT']
    except KeyError:
    	   ua = 'unknown'
    return HttpResponse('Your browser is %s'%ua)

或者:
def ua_display_good(request):
    ua = request.META.get('HTTP_USER_AGENT', 'unknown')
    return HttpResponse('Your browser is %s'%ua)


	
提交的数据信息
除了基本的元数据，HttpRequest对象还有两个属性包含了用户提交的信息:request.GET()和request.post()二者都是类字典对象，我们可以通过它们来访问GET和POST数据

类字典对象:
POST数据是来自HTML中的<form>标签提交的,而GET数据可能来自<form>提交也可能是字符串

表单处理示例:

第一步:建立view来显示一个搜索表单
from django.shortcuts import render_to_response

def search_form(request):
    return render_to_response('search_form.html')

#search_form.html#
<html>
<head>
	<title>Search</title>
</head>
<body>
	<form action="/search/" method="get">
	<input text="text" name="q">
	<input type="submit" value="Search">
</body>
</html>

而在urls.py中的URLpatterm:

urlpatterms = patterms('',
	#...
	(r'^search-form/$', search_form),
	#...
)

在我们的views中添加search的内容:
#views.py#
def search(request):
    if 'q' in request.GRT:
       message = 'You search for:%r '%resquest.GET['q']
    else:
	message = 'You submitted an empty form'
    return HttpResponse(message)

1.在HTML里我们定义一个变量q。当提交表单的时候，变量q的值通过GET(method="get")附加在 URL/search上
2.处理/search/ 的视图通过request.GET来获取q的值


使用POST：
获取使用POST方法的数据与GET的相似，只是使用request.POST代替了request.GET。
POST和GET的不同:
当我们提交表单仅仅需要获取数据就可以使用GET
当我们提交表单的时候，需要更改服务器状态的,或者说发送e-mail，或者其他不仅仅是获取并显示数据的
时候就用POST。

def search(request):
    if 'q' in request.GET and request.GET['q']:
       q = request.GET['q']
       books = Book.object.filter(title_icontains=q)
       return render_to_response('search_result.html', {'books':books, 'query':q})
    else:
	return HttpResponse('Please submit a search term')


当我们的HTML网页中:
<form action="" method="get">
action=""意味着表单将提交给与当前页面相同的URL。


编写Contact表单：
站点联系表单：
这个表单包括用户提交的反馈信息，一个可选的e-mail回信地址。当这个表单提交并且数据通过验证以后，
系统将自动发送一封包含用户提交的信息的e-mail给站点工作人员。

contact_form.html模板:
<html>
<head>
	<title>Contact us</title>
</head>
<body>
	<h1>Contact us</h1>
	{% if errors %}
	   <ul>
		{% for error in errors%}
		   <li>{{ error }}</li>
		{% endfor %}
	   </ul>
	{% endif %}

	<form action="contact" /method="post">
	      <p>Subject:<input type="text" name="subject"></p>
	      <p>Your e-mail(optional):<input type="text" name="email"></p>
	      <p>Message<textarea name="message" rows="10" cols="50"></textarea></p>
	      <input type="submit" value="Submit">
	</form>
</body>
</html>

我们定义了三个字段:主题,e-mail和反馈信息。除了e-mail字段为可选，其他两个字段都是必填的。
注意:这里使用的method="post"而非"get"，因为这个表单会有一个服务器端的操作:发送一封e-mail。

contact()视图代码:
from django.core.mail import send_mail
from django.http import HttpResponseRedirect
from django.shortcuts import render_to_response

def contact(request):
    errors = []
    if request.method == 'POST':
       if not request.POST.get('subject'):
       	  errors.append('Enter a subject')
       if not request.POST.get('message'):
       	  errors.append('Enter a message')
       if not request.POST.get('email') and '@' not in request.POST['email']:
       	  errors.append('Enter a valid e-mail address')
    
     if not errors:
     	send_email(
		request.POST['subject'],
		request.POST['message'],
		request.POST.get('email','noreplly@example.com'),
		['siteownwe@example.com'],
	)
     	return HttpResponseRedirect('/contact/thanks')

     return render_to_response('contact_form.html')

分析:
确认request.method的值是'POST'。用户浏览表单时这个值并不会存在，当且仅当表单被提交时这个值才出现。在普通的网页浏览中，浏览器都使用GET，而非POST。
判断request.method的值很好地帮助我们将表单显示与表单处理隔离开来。

我们使用request.POST代替request.GET来获取提交的数据。只是必须的，因为contact_form.html里表单使用的是method="post".如果在视图里面通过POST来获取数据，那么request.GET将为空。

这里，有两个必填项,subject和message，所以需要对这两个进行验证。注意,我们使用request.POST.get()方法，并提供一个空的字符串作为默认值:这个方法很好的解决了键丢失与空间数据问题。

我们使用django.core.mail.send_mail函数来发送e-mail。这个函数有四个必选参数:主题,正文,寄信
人和收件人列表。send_mail是Django的EmailMessage类的一个方便的包装,EmailMessage类提供了更高级的方法，比如附加，多部分邮件，以及对邮件头部完整的控制。

注意，若要使用send_mail()函数来发送邮件，那么服务器需要配置成能够对外发送邮件，并且在Django中设置出站服务器地址。

注意：如果用户在POST表单之后被重定向到另外的页面，就不会造成重复的请求。

我们应该每次都给成功的POST请求做重定向。这就是web开发的最佳实践。



Form类：

Djanto带有一个form库，称为django.forms。

在社区当中的django.forms其实就是现在比较新的django.newforms。

表单框架最主要的用法是,为每一个将要处理的HTML的<form>定义一个Form类。
我们可以在我们的views中直接使用这个类:

from django import forms

class ContactForm(forms.Form):
    subject = form.CharField()
    email = form.EmailField(requeired=False)
    message = forms.CharField()

我们可以创建一个新的Form对象:
f = ContactForm({"subject":"hello", "email":"songshuang@gmail.com", "message":"Nice site!"})
一旦你对一个Form实体赋值，我们就可以得到一个绑定的form:
f.is_bound====True
调用任何绑定form的is_valid()方法，就可以直到它的数据是否合法。
f.is_valid() ===True

如果我们不传入emial的值的时候，它依然是合法的，因为我们在定义这个字段的属性的时候required=False
如果我们定义subject或message为空的时候，就不合法，因为我们没有对其属性进行设置。

每一个绑定的Form实体都有一个errors属性，它为你提供了一个字段与错误消息映射的字典表:
f = ContactForm({"subject":"hello","message":""})
f.errors ===> {"message":{u'this field is required'}}

最终，如果一个Form实体的数据是合法的，它就会有一个可用的cleaned_data属性。这是一个包含干净的提交数据的字典。Django的form框架不但校验数据，它还会把他们转换成相应的Python类型数据，这叫清理数据。

f = ContactForm({"subject":"hello","email":"songshuang@gmail.com", "message":"Nice site!"})
f.is_valid()--->True
f.cleaned_data--->{'message':u'Nice site!', 'email':'songshuang@gmail.com', 'subject':u'hello'}


在视图中使用Form对象:
如:
#views.py#
from django.shortcuts import render_to_response
import ContactForm

def contact(request):
    if reuqest.method=="POST"
       form = ContactForm(request.POST)
       if form.is_vaild():
       	  cd = form.cleaned_data
	  send_mail(
		cd['subject'],
		cd['message'],
		cd.get('email','songshuang@gmail.com'),
		['songsuangkk@sina.com'],
	  )
	  return HttpResponseRedirect('/contact/thanks')
     else:
	form = ContactForm()
     return rneder_to_response('contact_form.html',{'form':form})


#contact_form.html#
<html>
<head>
	<title>Contact us</title>
</head>
<body>
	<h1>Contact us</h1>
	
	{% if form.errors %}
	   <p style="color:red">
	      Please correct the error{{ form.errors|pluralize}} below.
	   </p>
	{% endif %}
	
	<form action="" method="post">
	      <table>
		{{ form.as_table }}
	      </table>
	      <input type="submit" value="Submit">
	</form>
</body>
</html>


改变字段显示:
forms框架把每一个字段的显示逻辑分离到一组部件(widget)中。每一个字段类型都拥有一个默认的部件，我们也可以容易的替换掉默认的部件，获知提供一个自定义的部件。
我们使用*widget*来修饰:

from django import forms
class ContactForm(forms.Form):
      subject = form.CharField()
      email = forms.EmailField(required=False)
      message = form.CharField(widget=forms.Textarea)

设置最大长度:
一个最经常使用的校验要求是检查字段长度。
from django import forms

class ContactForm(forms.Form):
      subject = forms.CharField(max_length=100)
      email = forms.EmailField(required=False)
      message = forms.CharField(widget=forms.Textarea)



设置初始值：
使用initail参数:
def contact(request):
    if request.method=='POST':
       form = ContactForm(request.POST)
       if form.is_vaile():
       	  cd = form.cleaned_data
	  send_mail(
		cd['subject'],
		cd['message'],
		cd.get('email','songshuang@gmail.com'),
		['songhshuang@sina.com'],
	  )
	  return HttpResponseRedirect('/contact/thanks')
     else:
	form ContactForm()
	     initial = ['subject':'love youe site']
     return render_to_response('contact_form',{'form':form})


自定义校验规则：

如果我们的规则会被一次又一次的使用，我们可以创建一个自定义的字段类型。大多数的自定义校验都是一次性的，可以直接绑定到form类。

我们希望‘message’字段有一个额外的校验，我们增加一个'clean_message()'方法到'Form'类：

from django import forms

class ContactForm(forms.Form):
      subject = form.CharField(max_length=100)
      email = form.EmailField(required=False)
      message = form.CharField(widget=forms.Textarea)

      def clean_message(self):
      	  message = self.cleaned_data('message')
	  num_words = len(message.split())
	  if num_words < 4:
	     raise forms.ValidataionError('Not enougth words')
	  return message