基本的简单操作：
import numpy as np

a = np.array([1,2,3,4])
print 2**a
	array([2,4,8,16])
a = a + 1
print a
	array([2,3,4,5])

b = np.ones(4, dtype=int) + 1
print b
	array([2,2,2,2])

pritn a - b 
	array([-1,0,1,2])

print a*b
	array([2,4,6,8])

j = np.arange(5)
print 2**(j+1) -j
	array([2,3,6,13,28])

使用的时间效率：
a = np.arange(10000)
timeite a + 1
10000 loops, best of 3: 24.3 us per loop

l = range(10000)
timeit [i+1 for i in l]
1000 loops, best of 3: 861 us per loop

由此可见，我们使用Numpy创建的数组在操作上面，效率并不高


两个数组的比较:
a = np.array([1,2,3,4])
b = np.array([4,2,2,4])
a == b
	array([False, True, False, True],dtype=bool)
或者使用函数array_equal():
a = np.array([1,2,3,4])
b = np.array([4,2,2,4])
c = np.array([1,2,3,4])
np.array_equal(a,b)
	False
np.array_equal(a,c)
	True

逻辑运算:
使用logical_or()或logical_and()或logical_not或logical_xor()
a = np.array([1, 1, 0, 0], dtype=bool)
b = np.array([1, 0, 1, 0], dtype=bool)
np.logical_or(a, b)
array([ True,  True,  True, False], dtype=bool)
np.logical_and(a, b)
array([ True, False, False, False], dtype=bool)

使用数学函数:
sin(),log(),exp()
a = np.arange(5)
np.sin(a)
array([ 0.        ,  0.84147098,  0.90929743,  0.14112001, -0.7568025])
np.log(a)
array([       -inf,  0.        ,  0.69314718,  1.09861229,  1.38629436])
np.exp(a)
array([  1.00000000e+00,   2.71828183e+00,   7.38905610e+00,
         2.00855369e+01,   5.45981500e+01])

使用替换:
a = np.triu(np.ones(3,3),1)
a
array([[ 0.,  1.,  1.],
       [ 0.,  0.,  1.],
       [ 0.,  0.,  0.]])
a.T
array([[ 0.,  0.,  0.],
       [ 1.,  0.,  0.],
       [ 1.,  1.,  0.]])
这个是表示从第一行开始的第1个元素开始做对角线，对角线及对角线以下的部分
变成0
a.T表示的相反的方向归0.

元素求和:
x = np.array([1, 2, 3, 4])
np.sum(x)
10
x.sum()
10

对于多维数组的元算：
x = np.array([[1, 1], [2, 2]])
x
array([[1, 1],
       [2, 2]])
x.sum(axis=0)   # columns (first dimension)以列为单位进行计算
array([3, 3])
x[:, 0].sum(), x[:, 1].sum()每一组元算的第一列的和，每一组元素的第二列的和
(3, 3)
x.sum(axis=1)   # rows (second dimension)以行为单位进行计算
array([2, 4])
x[0, :].sum(), x[1, :].sum()
(2, 4)


最值：
x = np.array([1,3,2])
x.min():1
x.max():3
最值元素的索引：
x.argmin():0
x.argmax():1
